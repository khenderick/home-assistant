[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openmotics"
version = "0.0.0"
description = "Homeassistant Custom Component for Openmotics"
license = "AGPLv3"
authors = ["Wouter Coppens <wouter.coppens@gmail.com>"]
readme = "README.md"
repository = "https://github.com/openmotics/home-assistant"
keywords = [
    "aiohttp",
    "asyncio",
    "openmotics",
    "openmotics-api"
]
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU Affero General Public License v3"
]

[tool.poetry.dependencies]
python = "^3.10"
homeassistant = "^2023.3"
# pyhaopenmotics = "0.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.2"
black = "23.3.0"
pre-commit = "3.2.1"
pre-commit-hooks = "4.4.0"
ruff = "0.0.259"
pylint = "2.17.1"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--cov --cov-report term-missing --cov=custom_components tests"

[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.vulture]
min_confidence = 80
paths = ["custom_components", "tests"]


[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = 3.9

# flake8-mypy expects the two following for sensible formatting
show_column_numbers = true

# show error messages from unrelated files
follow_imports = "silent"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_untyped_calls = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

# No incremental mode
cache_dir = "/dev/null"

[[tool.mypy.overrides]]
follow_imports = "skip"
module = "mypy-aiohttp.*"

[tool.pyright]
include = ["custom_components"]

[tool.ruff]
src = ["custom_components/spook"]
select = ["ALL"]
ignore = [
  "ANN101", # Self... explanatory
  "ANN401", # Opiniated warning on disallowing dynamically typed expressions
  "ARG002", # Unused method argument: `kwargs`
  # Boolean positional value in function call
  "FBT001", "FBT002", "FBT003", 
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "N818", # Exception name should be named with an Error suffix
  "TID252", # Relative imports
  "TRY300", # Consider moving this statement to an `else` block
  "RET504", # Unnecessary variable assignment before `return` statement
]

[tool.ruff.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# duplicate-code - unavoidable
# used-before-assignment - false positives with TYPE_CHECKING structures
disable = [
    "format",
    "duplicate-code",
    "used-before-assignment",
]

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
version_pattern = "custom_components/openmotics/manifest.json:\"version\": \"{version}\""
version_variable = "custom_components/openmotics/const.py:VERSION"
build_command = false
upload_to_repository = false
upload_to_release = false
commit_subject = "chore(release): {version}"
branch = "main"
